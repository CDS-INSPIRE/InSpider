package nl.ipo.cds.dao;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.sql.Timestamp;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityNotFoundException;
import javax.persistence.PersistenceContext;
import javax.sql.DataSource;

import junit.framework.Assert;
import nl.idgis.commons.jobexecutor.AbstractJob;
import nl.idgis.commons.jobexecutor.Job;
import nl.idgis.commons.jobexecutor.JobLogger.LogLevel;
import nl.idgis.commons.utils.DateTimeUtils;
import nl.ipo.cds.categories.IntegrationTests;
import nl.ipo.cds.domain.Bronhouder;
import nl.ipo.cds.domain.BronhouderThema;
import nl.ipo.cds.domain.Dataset;
import nl.ipo.cds.domain.DatasetType;
import nl.ipo.cds.domain.EtlJob;
import nl.ipo.cds.domain.ImportJob;
import nl.ipo.cds.domain.JobLog;
import nl.ipo.cds.domain.Thema;
import nl.ipo.cds.domain.TransformJob;
import nl.ipo.cds.domain.ValidateJob;

import org.deegree.geometry.Geometry;
import org.deegree.geometry.multi.MultiPolygon;
import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.orm.jpa.JpaObjectRetrievalFailureException;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;

@RunWith(SpringJUnit4ClassRunner.class)
@TransactionConfiguration(defaultRollback = true, transactionManager = "transactionManager")
@Category(IntegrationTests.class)
public class ManagerDaoTest extends BaseManagerDaoTest {
    @Autowired
    private DataSource dataSource;
    
    @PersistenceContext
    private EntityManager entityManager;

    public ManagerDaoTest() {
        super();
    }

    /**
     * build up a database with base tables to be used in the testcases
     * @throws Exception 
     */
    // when using @BeforeClass with 'public static void buildDB()' the managerDao==null
    @Before
    public void buildDB() throws Exception {
    	super.buildDB ();
    }
	
    @Test
    public void testStamTabellen() {
    	System.out.println("------------- testStamTabellen ---------------");
    	Assert.assertEquals(managerDao.getThema(thema.getId()).getNaam(), managerDao.getDatasetType(datasetType1.getId()).getThema().getNaam());
    	Assert.assertEquals(managerDao.getThema(thema.getId()), managerDao.getDatasetType(datasetType2.getId()).getThema());
    	
    	Assert.assertEquals("IMPORT", managerDao.getJobType(jobTypeI.getId()).getNaam());
    	Assert.assertEquals("IDgis", managerDao.getBronhouder(bronhouderOV.getId()).getContactNaam());
    	
    }

    @Test
    public void testCreateJob() {
    	logger.info("------------- testCreateJob ---------------");
    	System.out.println("------------- testCreateJob ---------------");

        Dataset dataset = new Dataset();
        dataset.setUuid("123uuid321");
        dataset.setDatasetType(datasetType2);
        dataset.setBronhouder(bronhouderOV);
		dataset.setActief(true);
        managerDao.create(dataset);
        Assert.assertFalse((dataset.getId()==null));
        managerDao.update(dataset);

        ValidateJob job = new ValidateJob();
		// copy properties from dataset to job
		job.setBronhouder(dataset.getBronhouder());
		job.setDatasetType(dataset.getDatasetType());
		job.setUuid(dataset.getUuid());
		job.setStatus(Job.Status.CREATED);
        managerDao.create(job);
        // build job
        Assert.assertFalse((job.getId()==null));        
        job.setStatus(Job.Status.STARTED);

        job.setStatus(Job.Status.FINISHED);      
        managerDao.update(job);
        System.out.println(job);
        // job built

        // test order of creatie-, start-, eindtijd  
        Assert.assertTrue(managerDao.getJob(job.getId()).getCreateTime().getTime() <= managerDao.getJob(job.getId()).getStartTime().getTime());
        Assert.assertTrue(managerDao.getJob(job.getId()).getStartTime().getTime() <= managerDao.getJob(job.getId()).getFinishTime().getTime());

        // test nesting (Primary and foreign keys)
        Assert.assertNotNull(managerDao.getJob(job.getId()));
    }

    @Test
    public void testUUID() {
	    testUUID("utrecht","WAV","5c1c398d-d7d7-44e1-bf8a-caee7c2ba3f5");
	    testUUID("noordholland","AW","E0C183FB-BB18-4C5B-B1AC-E3423B266002");
	    testUUID("zuidholland","EHS","30583498-5ED1-46C3-A0C7-92A19B9696D0");
	    testUUID("zeeland","NL","9404865D-946F-4FBF-99D4-D059B2D678E1");
    }

    @Test
    public void testLog() {
    	ValidateJob job = new ValidateJob();
    	
    	JobLog log = new JobLog();
    	log.setLogLevel(LogLevel.ERROR);
    	log.setJob(job);
    	
    	managerDao.create(job);
    	managerDao.create(log);
    	entityManager.flush();
    	
    }
    
    private void testUUID(String commonName, String typenaam, String uuidStr) {
		Dataset dataset1, dataset2;
        dataset1 = createNewDataset(commonName, typenaam, uuidStr);
        dataset2 = managerDao.getDatasetsByUUID(uuidStr).get(0);
        Assert.assertEquals(dataset1.getUuid(), dataset2.getUuid());
	}
	
	private Dataset createNewDataset(String commonName, String typenaam, String uuidStr) {
		Dataset dataset = new Dataset();
		dataset.setBronhouder(managerDao.getBronhouderByCommonName(commonName));
		dataset.setDatasetType(managerDao.getDatasetTypeByName(typenaam));
		dataset.setUuid(uuidStr);
		managerDao.create(dataset);
		
		createNewJob(dataset);
		return dataset;
	}

	private AbstractJob createNewJob(Dataset dataset) {
		ValidateJob job = new ValidateJob();
		// copy properties from dataset to job
		job.setBronhouder(dataset.getBronhouder());
		job.setDatasetType(dataset.getDatasetType());
		job.setUuid(dataset.getUuid());
		job.setStatus(Job.Status.STARTED);
		job.setMetadataUpdateDatum(new Timestamp(0));
		job.setStatus(Job.Status.FINISHED);
		managerDao.create(job);		
		return job;
	}
	
	private <T extends EtlJob> T createJob (final T job, final Job.Status status) {
    	final Dataset dataset = managerDao.getAllDatasets().get(0);
    	
		job.setBronhouder (dataset.getBronhouder ());
		job.setDatasetType (dataset.getDatasetType ());
		job.setUuid (dataset.getUuid ());
		job.setStatus (Job.Status.STARTED);
		job.setMetadataUpdateDatum (new Timestamp (0));
		job.setStatus (status);
		managerDao.create (job);
		return job;
	}

    @Test
    public void testGetLastTransformJob() {
		final TransformJob transformJob = new TransformJob ();
		managerDao.create (transformJob);

		entityManager.flush();
    	
    	EtlJob refoundJob = managerDao.getLastTransformJob(Job.Status.CREATED);
    	Assert.assertEquals(transformJob, refoundJob);
    }
    
    @Test
    public void testGetJobsByDataset(){
    	
    	createJob (new ImportJob (), Job.Status.STARTED);
    	
    	Dataset dataset = managerDao.getAllDatasets().get(0);
    	Assert.assertNotNull("No dataset Found", dataset);
    	List<EtlJob> jobs = this.managerDao.getJobsByDataset(dataset.getBronhouder(), dataset.getDatasetType(), dataset.getUuid());
    	Assert.assertNotNull("No joblist found", jobs);
    	Assert.assertTrue("No jobs found", jobs.size() > 0);

    	jobs = this.managerDao.getJobsByDataset(dataset.getBronhouder(), dataset.getDatasetType(), null);
    	Assert.assertNotNull("No joblist found", jobs);
    	Assert.assertTrue("No jobs found", jobs.size() > 0);
    }
    
    @Test
    public void testGetAllJobs () {
    	int initialJobsize  = managerDao.getAllJobs ().size();
    	createJob (new ImportJob (), Job.Status.FINISHED);
    	createJob (new ValidateJob (), Job.Status.ABORTED);
    	
    	final List<AbstractJob> jobs = managerDao.getAllJobs ();
    	
    	assertEquals (initialJobsize+2, jobs.size ());//BuildDB adds one job
    }
    
    @Test
    public void testGetJobsByStatus () {
    	int initialFinishedJobsize  = managerDao.getJobsByStatus (Job.Status.FINISHED).size ();
    	int initialAbortedJobsize  = managerDao.getJobsByStatus (Job.Status.ABORTED).size ();
    	createJob (new ImportJob (), Job.Status.FINISHED);
    	createJob (new ValidateJob (), Job.Status.ABORTED);
    	
    	assertEquals (initialFinishedJobsize + 1, managerDao.getJobsByStatus (Job.Status.FINISHED).size ());
    	assertEquals (initialAbortedJobsize + 1, managerDao.getJobsByStatus (Job.Status.ABORTED).size ());
    }

    @Test
    public void testGetLastCompletedJob () {
    	final Dataset dataset = managerDao.getAllDatasets().get(0);
    	
    	final EtlJob job = createJob (new ImportJob (), Job.Status.FINISHED);
    	job.setVerversen (true);
    	job.setFinishTime (DateTimeUtils.now ());
    	managerDao.update (job);
    	final EtlJob completedJob = managerDao.getLastCompletedJob (dataset.getBronhouder (), dataset.getDatasetType (), dataset.getUuid ());
    	
    	assertNotNull (completedJob);
    	assertNotNull (job.getId ());
    	assertEquals (job.getId (), completedJob.getId ());
    }

    @Test
    public void testGetLastValidationJob () {
    	final Dataset dataset = managerDao.getAllDatasets().get(0);
    	final EtlJob job = createJob (new ValidateJob (), Job.Status.FINISHED);
    	job.setVerversen (true);
    	job.setFinishTime (DateTimeUtils.now ());
    	managerDao.update (job);
    	
    	final EtlJob validateJob = managerDao.getLastValidationJob (dataset.getBronhouder (), dataset.getDatasetType (), dataset.getUuid ());
    	
    	assertNotNull (validateJob);
    	assertNotNull (job.getId ());
    	assertEquals (job.getId (), validateJob.getId ());
    }
    
    @Test
    public void testGetLastJobThatValidated () {
    	final Dataset dataset = managerDao.getAllDatasets().get(0);
    	final EtlJob job = createJob (new ValidateJob (), Job.Status.FINISHED);
    	job.setVerversen (true);
    	job.setFinishTime (DateTimeUtils.now ());
    	managerDao.update (job);
    	
    	final EtlJob validateJob = managerDao.getLastJobThatValidated (dataset.getBronhouder (), dataset.getDatasetType (), dataset.getUuid ());
    	
    	assertNotNull (validateJob);
    	assertNotNull (job.getId ());
    	assertEquals (job.getId (), validateJob.getId ());
    }

    @Test
    public void testGetLastImportJob () {
    	final Dataset dataset = managerDao.getAllDatasets().get(0);
    	final ImportJob job = createJob (new ImportJob (), Job.Status.FINISHED);
    	job.setVerversen (true);
    	job.setFinishTime (DateTimeUtils.now ());
    	managerDao.update (job);
    	
    	final EtlJob importJob = managerDao.getLastImportJob (dataset.getBronhouder (), dataset.getDatasetType (), dataset.getUuid ());
    	
    	assertNotNull (importJob);
    	assertNotNull (job.getId ());
    	assertEquals (job.getId (), importJob.getId ());
    }

    @Test
    public void testGetLastSuccessfullImportJob () {
    	final Dataset dataset = managerDao.getAllDatasets().get(0);
    	final ImportJob job = createJob (new ImportJob (), Job.Status.FINISHED);
    	job.setVerversen (true);
    	job.setFinishTime (DateTimeUtils.now ());
    	managerDao.update (job);
    	
    	final EtlJob importJob = managerDao.getLastSuccessfullImportJob (dataset.getBronhouder (), dataset.getDatasetType (), dataset.getUuid ());
    	
    	assertNotNull (importJob);
    	assertNotNull (job.getId ());
    	assertEquals (job.getId (), importJob.getId ());
    }

    @Test
    public void testGetPendingJob () {
    	final ImportJob job = createJob (new ImportJob (), Job.Status.STARTED);
    	job.setVerversen (true);
    	managerDao.update (job);
    	
    	final EtlJob pendingJob = managerDao.getPendingJob (job);
    	
    	assertNotNull (pendingJob);
    	assertNotNull (job.getId ());
    	assertEquals (job.getId (), pendingJob.getId ());
    }
    
    @Test
    public void testGetLastCompletedJobs () {
    	int initialJobsize  = managerDao.getJobsByStatus (Job.Status.FINISHED).size ();
    	initialJobsize  += managerDao.getJobsByStatus (Job.Status.ABORTED).size ();
    	// Should report only the last instance of both the import and the validate job:
    	createJob (new ImportJob (), Job.Status.STARTED);
    	final ImportJob finishedJob = createJob (new ImportJob (), Job.Status.FINISHED);
    	final ImportJob finishedJob2 = createJob (new ImportJob (), Job.Status.FINISHED);
    	final ValidateJob abortedJob = createJob (new ValidateJob (), Job.Status.ABORTED);
    	final ValidateJob abortedJob2 = createJob (new ValidateJob (), Job.Status.ABORTED);
    	finishedJob.setVerversen (true);
    	finishedJob2.setVerversen (true);
    	finishedJob.setFinishTime (DateTimeUtils.now ());
    	finishedJob2.setFinishTime (new Timestamp (DateTimeUtils.now ().getTime() + 10));
    	abortedJob.setVerversen (true);
    	abortedJob2.setVerversen (true);
    	abortedJob.setFinishTime (DateTimeUtils.now ());
    	abortedJob2.setFinishTime (new Timestamp (DateTimeUtils.now ().getTime() + 10));
    	managerDao.update (finishedJob);
    	managerDao.update (finishedJob2);
    	managerDao.update (abortedJob);
    	managerDao.update (abortedJob2);
    	
    	final List<JobInfo> jobInfos = managerDao.getLastCompletedJobs ();
    	
    	assertNotNull (jobInfos);
    	if (initialJobsize==0){
    		assertEquals (2, jobInfos.size ());
    	}else{
    		assertEquals (initialJobsize, jobInfos.size ());
    	}
    }

    
   
    @Test
    public void testCreateTestJob () {
    	final ImportJob importJob = new ImportJob ();
    	
    	managerDao.create (importJob);
    	
    	assertNotNull (importJob.getId ());
    	
    	assertNotNull (entityManager.getReference (ImportJob.class, importJob.getId ()));
    }   
        
    @Test
    public void testDeleteJob () {
    	final ImportJob importJob = new ImportJob ();
    	managerDao.create (importJob);
    	
    	final AbstractJob fetchedJob = managerDao.getJob (importJob.getId ());
    	
    	assertNotNull (fetchedJob);
    	
    	managerDao.delete (fetchedJob);
    	
    	assertNull (managerDao.getJob (importJob.getId ()));
    	try {
    		entityManager.getReference (EtlJob.class, importJob.getId ());
    	} catch (JpaObjectRetrievalFailureException e) {
    		return;
    	} catch (EntityNotFoundException e) {
    		return;
    	}
    	
    	fail ();
    }

    @Test
    public void testCreateDataset () {
    	final Dataset test = new Dataset ();    	
    	managerDao.create (test);    	
    	assertNotNull (test.getId ());    	
    	assertNotNull (entityManager.getReference (Dataset.class, test.getId ()));
    }   
        
    @Test
    public void testDeleteDataset () {
    	final Dataset test = new Dataset ();
    	managerDao.create (test);    	
    	managerDao.delete (test);    	
    	try {
    		Dataset ref = this.entityManager.getReference(Dataset.class, test.getId());
    	} catch (JpaObjectRetrievalFailureException e) {
    		return;
    	} catch (EntityNotFoundException e) {
    		return;
    	}    	
    	fail ();
    }

    @Test
    public void testCreateDatasetType () {
    	final DatasetType test = new DatasetType ();    	
    	managerDao.create (test);    	
    	assertNotNull (test.getId ());    	
    	assertNotNull (entityManager.getReference (DatasetType.class, test.getId ()));
    }   
        
    @Test
    public void testDeleteDatasetType () {
    	final DatasetType test = new DatasetType ();
    	managerDao.create (test);    	
    	managerDao.delete (test);    	
    	try {
    		DatasetType ref = this.entityManager.getReference(DatasetType.class, test.getId());
    	} catch (JpaObjectRetrievalFailureException e) {
    		return;
    	} catch (EntityNotFoundException e) {
    		return;
    	}    	
    	fail ();
    }

    @Test
    public void testCreateBronhouder () {
    	final Bronhouder test = new Bronhouder ();    	
    	managerDao.create (test);    	
    	assertNotNull (test.getId ());    	
    	assertNotNull (entityManager.getReference (Bronhouder.class, test.getId ()));
    }   
        
    @Test
    public void testDeleteBronhouder () {
    	final Bronhouder test = new Bronhouder ();
    	managerDao.create (test);    	
    	managerDao.delete (test);    	
    	try {
    		Bronhouder ref = this.entityManager.getReference(Bronhouder.class, test.getId());
    	} catch (JpaObjectRetrievalFailureException e) {
    		return;
    	} catch (EntityNotFoundException e) {
    		return;
    	}    	
    	fail ();
    }

    @Test
    public void testCreateThema () {
    	final Thema test = new Thema ();    	
    	managerDao.create (test);    	
    	assertNotNull (test.getId ());    	
    	assertNotNull (entityManager.getReference (Thema.class, test.getId ()));
    }   
        
    @Test
    public void testDeleteThema () {
    	final Thema test = new Thema ();
    	managerDao.create (test);    	
    	managerDao.delete (test);    	
    	try {
    		Thema ref = this.entityManager.getReference(Thema.class, test.getId());
    	} catch (JpaObjectRetrievalFailureException e) {
    		return;
    	} catch (EntityNotFoundException e) {
    		return;
    	}    	
    	fail ();
    }

    @Test
    public void testCreateJobLog () {
    	final JobLog test = new JobLog ();    	
    	managerDao.create (test);    	
    	assertNotNull (test.getId ());    	
    	assertNotNull (entityManager.getReference (JobLog.class, test.getId ()));
    }   
        
    @Test
    public void testDeleteJobLog () {
    	final JobLog test = new JobLog ();
    	managerDao.create (test);    	
    	managerDao.delete (test);    	
    	try {
    		JobLog ref = this.entityManager.getReference(JobLog.class, test.getId());
    	} catch (JpaObjectRetrievalFailureException e) {
    		return;
    	} catch (EntityNotFoundException e) {
    		return;
    	}    	
    	fail ();
    }

    @Test
    public void testGetBronhouderGeometry () {

    	entityManager.flush ();
    	
    	// Insert a geometry:
    	final JdbcTemplate template = new JdbcTemplate (dataSource);
    	
    	template.execute ("INSERT INTO manager.bronhouder_geometry (bronhouder_id, geom) VALUES ((select id from manager.bronhouder where code
    	
    	// Locate the geometry:  
    	final Geometry geometry = managerDao.getBronhouderGeometry (bronhouderNH);
    	
    	assertNotNull (geometry);
    	assertEquals (2, geometry.getCoordinateDimension ());
    	assertNull (geometry.getCoordinateSystem ());
    	assertTrue (geometry instanceof MultiPolygon);
    	
    	assertEquals (1, ((MultiPolygon)geometry).size ());
    	assertTrue (((MultiPolygon)geometry).get (0).getArea (null).getValueAsDouble () > 3420000000.0);
    }
    
    @Test
    public void testGetAllThemas () {
    	entityManager.flush ();
    	
    	final List<Thema> themas = managerDao.getAllThemas ();
    	
    	assertNotNull (themas);
    	assertEquals (2, themas.size ());
    	assertEquals ("Protected sites", themas.get(0).getNaam());
    	assertEquals ("Thema 2", themas.get (1).getNaam ());
    }
    
    @Test
    public void testGetBronhouderThemas () {
    	entityManager.flush ();
    	
    	final List<BronhouderThema> bronhouderThemas = managerDao.getBronhouderThemas ();
    	
    	assertEquals (4, bronhouderThemas.size ());
    	
    	assertEquals ("Drenthe", bronhouderThemas.get (0).getBronhouder ().getNaam ());
    	assertEquals ("Limburg", bronhouderThemas.get (1).getBronhouder ().getNaam ());
    	assertEquals ("Noord-Holland", bronhouderThemas.get (2).getBronhouder ().getNaam ());
    	assertEquals ("Overijssel", bronhouderThemas.get (3).getBronhouder ().getNaam ());
    	
    	assertEquals ("Protected sites", bronhouderThemas.get (0).getThema ().getNaam ());
    	assertEquals ("Protected sites", bronhouderThemas.get (1).getThema ().getNaam ());
    	assertEquals ("Thema 2", bronhouderThemas.get (2).getThema ().getNaam ());
    	assertEquals ("Thema 2", bronhouderThemas.get (3).getThema ().getNaam ());
    }
    
    @Test
    public void testGetBronhouderThemasByBronhouder () {
    	entityManager.flush ();
    	
    	final List<BronhouderThema> bronhouderThemas1 = managerDao.getBronhouderThemas (managerDao.getBronhouderByNaam ("Limburg"));
    	final List<BronhouderThema> bronhouderThemas2 = managerDao.getBronhouderThemas (managerDao.getBronhouderByNaam ("Overijssel"));
    	
    	assertEquals (1, bronhouderThemas1.size ());
    	assertEquals (1, bronhouderThemas2.size ());
    	
    	assertEquals ("Limburg", bronhouderThemas1.get (0).getBronhouder ().getNaam ());
    	assertEquals ("Protected sites", bronhouderThemas1.get (0).getThema ().getNaam ());
    	
    	assertEquals ("Overijssel", bronhouderThemas2.get (0).getBronhouder ().getNaam ());
    	assertEquals ("Thema 2", bronhouderThemas2.get (0).getThema ().getNaam ());
    }
    
    @Test
    public void testGetBronhouderByThema () {
    	entityManager.flush ();
    	
    	final List<BronhouderThema> bronhouderThemas1 = managerDao.getBronhouderThemas (managerDao.getThemaByName ("Protected sites"));
    	final List<BronhouderThema> bronhouderThemas2 = managerDao.getBronhouderThemas (managerDao.getThemaByName ("Thema 2"));
    	
    	assertEquals (2, bronhouderThemas1.size ());
    	assertEquals (2, bronhouderThemas2.size ());
    	
    	assertEquals ("Protected sites", bronhouderThemas1.get (0).getThema ().getNaam ());
    	assertEquals ("Protected sites", bronhouderThemas1.get (1).getThema ().getNaam ());
    	assertEquals ("Drenthe", bronhouderThemas1.get (0).getBronhouder ().getNaam ());
    	assertEquals ("Limburg", bronhouderThemas1.get (1).getBronhouder ().getNaam ());
    	
    	assertEquals ("Thema 2", bronhouderThemas2.get (0).getThema ().getNaam ());
    	assertEquals ("Thema 2", bronhouderThemas2.get (1).getThema ().getNaam ());
    	assertEquals ("Noord-Holland", bronhouderThemas2.get (0).getBronhouder ().getNaam ());
    	assertEquals ("Overijssel", bronhouderThemas2.get (1).getBronhouder ().getNaam ());
    }

    @Test
    public void testCreateBronhouderThema () {
    	final BronhouderThema bt = new BronhouderThema (thema, managerDao.getBronhouderByNaam ("Overijssel"));
    	
    	managerDao.create (bt);
    	
    	entityManager.flush ();
    	
    	assertEquals (5, managerDao.getBronhouderThemas ().size ());
    }
    
    @Test
    public void testDeleteBronhouderThema () {
    	entityManager.flush ();
    	
    	final BronhouderThema bt = managerDao.getBronhouderThemas ().get (0);
    	
    	managerDao.delete (bt);
    	
    	entityManager.flush ();
    	
    	assertEquals (3, managerDao.getBronhouderThemas ().size ());
    }
    
    @Test
    public void testGetBronhouderThema () {
    	entityManager.flush ();
    	
    	final BronhouderThema bronhouderThema = managerDao.getBronhouderThema (
    			managerDao.getBronhouderByNaam ("Drenthe"), 
    			managerDao.getThemaByName ("Protected sites")
    		);
    	
    	assertNotNull (bronhouderThema);
    	assertEquals ("Drenthe", bronhouderThema.getBronhouder ().getNaam ());
    	assertEquals ("Protected sites", bronhouderThema.getThema ().getNaam ());
    }
}
